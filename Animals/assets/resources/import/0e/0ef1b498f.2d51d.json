[1,["d00p4io+RHdbU83DhLU0Uf","61zeqbswZBfYt/66KQPrnn","08tgzf3rRHb6bgUHUwFTjn","4d5H3KycdKUY56Q4Whl/L+","ecpdLyjvZBwrvm+cedCcQy","e9daQMxs9EMISjzXbFCKxI","00U3Cnx9JJj6eCOcTR9qSs"],["node","_textureSetter","_spriteFrame","_effectAsset","root","data"],["cc.SpriteFrame",["cc.Node",["_name","_groupIndex","_active","_components","_prefab","_contentSize","_children","_parent"],0,9,4,5,2,1],["cc.Sprite",["_sizeMode","node","_materials","_spriteFrame"],2,1,3,6],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Material",["_name","_techniqueData"],2,11],["cc.Prefab",["_name"],2],["98cacqDxx1Cn5UNUVkSVhq6",["node"],3,1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[4,0,1,2],[5,0,2],[1,0,1,6,3,4,5,3],[1,0,2,7,3,4,5,3],[2,1,2,3,1],[2,0,1,2,3,2],[6,0,1],[3,1,2,1],[3,0,1,2,2],[7,0,1,2,4]],[[[[0,"outline",[{},"0",11,[{"defines":{"USE_TEXTURE":false}},"props",11,[{"outlineWidth":0.003},"outlineColor",8,[4,4278249215]]]]]],0,0,[0],[3],[0]],[[{"name":"property-purple-gold","rect":[0,0,100,100],"offset":[0,0],"originalSize":[100,100],"capInsets":[0,0,0,0]}],[0],0,[0],[1],[1]],[[[1,"AnimalChoose"],[2,"isChoose",3,[-4],[[4,-2,[2],3],[6,-3]],[7,-1,0],[5,50,50]],[3,"diamond",false,1,[[5,0,-5,[0],1]],[8,"d3Qd41JDVKroxPcd/daKB2",1,0],[5,50,50]]],0,[0,4,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,5,1,5],[0,0,0,0],[-1,2,-1,2],[2,3,4,5]],[[[9,"outline",[{"hash":620923164,"record":null,"name":"outline|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n in vec3 a_position;\n in vec4 a_color;\n out vec4 v_color;\n #if USE_TEXTURE\n in vec2 a_uv0;\n out vec2 v_uv0;\n #endif\n void main () {\n   vec4 pos = vec4(a_position, 1);\n   #if CC_USE_MODEL\n   pos = cc_matViewProj * cc_matWorld * pos;\n   #else\n   pos = cc_matViewProj * pos;\n   #endif\n   #if USE_TEXTURE\n   v_uv0 = a_uv0;\n   #endif\n   v_color = a_color;\n   gl_Position = pos;\n }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform InputData{\n  vec4 outlineColor;\n  float outlineWidth;\n};\nbool checkIsMakeOutline(vec2 pos){\n  float alpha = 0.1;\n  vec4 color = texture(texture, pos);\n  if(color.a <= alpha || outlineWidth == 0.0)return false;\n  color = texture2D(texture, pos + vec2(0, outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, 0));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(0, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, 0));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, outlineWidth));\n  if(color.a <= alpha)return true;\n  if(pos.x <= outlineWidth || pos.x >= 1.0 - outlineWidth)return true;\n  if(pos.y <= outlineWidth || pos.y >= 1.0 - outlineWidth)return true;\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if(checkIsMakeOutline(v_uv0)){\n    o = outlineColor;\n  }\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n attribute vec3 a_position;\n attribute vec4 a_color;\n varying vec4 v_color;\n #if USE_TEXTURE\n attribute vec2 a_uv0;\n varying vec2 v_uv0;\n #endif\n void main () {\n   vec4 pos = vec4(a_position, 1);\n   #if CC_USE_MODEL\n   pos = cc_matViewProj * cc_matWorld * pos;\n   #else\n   pos = cc_matViewProj * pos;\n   #endif\n   #if USE_TEXTURE\n   v_uv0 = a_uv0;\n   #endif\n   v_color = a_color;\n   gl_Position = pos;\n }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 outlineColor;\nuniform float outlineWidth;\nbool checkIsMakeOutline(vec2 pos){\n  float alpha = 0.1;\n  vec4 color = texture2D(texture, pos);\n  if(color.a <= alpha || outlineWidth == 0.0)return false;\n  color = texture2D(texture, pos + vec2(0, outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, 0));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(0, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, 0));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, outlineWidth));\n  if(color.a <= alpha)return true;\n  if(pos.x <= outlineWidth || pos.x >= 1.0 - outlineWidth)return true;\n  if(pos.y <= outlineWidth || pos.y >= 1.0 - outlineWidth)return true;\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if(checkIsMakeOutline(v_uv0)){\n    o = outlineColor;\n  }\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"InputData","binding":1,"members":[{"name":"outlineColor","type":16,"count":1},{"name":"outlineWidth","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"outline|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"outlineWidth":{"type":13,"value":[0.1]},"outlineColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}}}}]}]]],0,0,[],[],[]],[[{"name":"game_choose","rect":[0,0,50,50],"offset":[0,0],"originalSize":[50,50],"capInsets":[0,0,0,0]}],[0],0,[0],[1],[6]]]]